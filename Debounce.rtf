{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf0 \expnd0\expndtw0\kerning0
/*\
 Debounce\
\
 Each time the input pin goes from LOW to HIGH (e.g. because of a push-button\
 press), the output pin is toggled from LOW to HIGH or HIGH to LOW.  There's\
 a minimum delay between toggles to debounce the circuit (i.e. to ignore\
 noise).\
\
 The circuit:\
 * LED attached from pin 13 to ground\
 * pushbutton attached from pin 2 to +5V\
 * 10K resistor attached from pin 2 to ground\
\
 * Note: On most Arduino boards, there is already an LED on the board\
 connected to pin 13, so you don't need any extra components for this example.\
\
\
 created 21 November 2006\
 by David A. Mellis\
 modified 30 Aug 2011\
 by Limor Fried\
 modified 28 Dec 2012\
 by Mike Walters\
 modified 30 Aug 2016\
 by Arturo Guadalupi\
\
\
 This example code is in the public domain.\
\
 http://www.arduino.cc/en/Tutorial/Debounce\
 */\
\
// constants won't change. They're used here to\
// set pin numbers:\
const int buttonPin = 2;    // the number of the pushbutton pin\
const int ledPin = 13;      // the number of the LED pin\
\
// Variables will change:\
int ledState = HIGH;         // the current state of the output pin\
int buttonState;             // the current reading from the input pin\
int lastButtonState = LOW;   // the previous reading from the input pin\
\
// the following variables are unsigned long's because the time, measured in miliseconds,\
// will quickly become a bigger number than can be stored in an int.\
unsigned long lastDebounceTime = 0;  // the last time the output pin was toggled\
unsigned long debounceDelay = 50;    // the debounce time; increase if the output flickers\
\
void setup() \{\
  pinMode(buttonPin, INPUT);\
  pinMode(ledPin, OUTPUT);\
\
  // set initial LED state\
  digitalWrite(ledPin, ledState);\
\}\
\
void loop() \{\
  // read the state of the switch into a local variable:\
  int reading = digitalRead(buttonPin);\
\
  // check to see if you just pressed the button\
  // (i.e. the input went from LOW to HIGH),  and you've waited\
  // long enough since the last press to ignore any noise:\
\
  // If the switch changed, due to noise or pressing:\
  if (reading != lastButtonState) \{\
    // reset the debouncing timer\
    lastDebounceTime = millis();\
  \}\
\
  if ((millis() - lastDebounceTime) > debounceDelay) \{\
    // whatever the reading is at, it's been there for longer\
    // than the debounce delay, so take it as the actual current state:\
\
    // if the button state has changed:\
    if (reading != buttonState) \{\
      buttonState = reading;\
\
      // only toggle the LED if the new button state is HIGH\
      if (buttonState == HIGH) \{\
        ledState = !ledState;\
      \}\
    \}\
  \}\
\
  // set the LED:\
  digitalWrite(ledPin, ledState);\
\
  // save the reading.  Next time through the loop,\
  // it'll be the lastButtonState:\
  lastButtonState = reading;\
\}
\f1\fs24 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
This piece of codes objective is determine the current state of the input or output ( to see is it toggles on or off,, or HIGH / LOW )\
\
It checks twice as their can be a technical issues which can may lead to misinformation\
\
It also contains a sketch ( millis ) function to keep track of times passed since button was last pressed \
\
buttonPin 2\
ledPin 13}